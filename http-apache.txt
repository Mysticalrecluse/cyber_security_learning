重点概念：
浏览器访问网站的过程（必备）
1. 在浏览器地址栏中输入网址
2. DNS解析域名，获得服务器IP地址
			DNS缓存查询
			DNS递归查询
                        返回服务器IP
3. TCP连接
	3次握手
	4次挥手

4. HTTP请求
	发送请求参数到服务器
	服务器返回内容

5. 客户端浏览器渲染页面
	获取HTML，CSS，JS等各种资源
	渲染模块，CSS CORE，JS CORE等
	构建DOM树
	样式计算：布局
	生成效果页面



url,uri,urn的概念


http请求头和响应头结构

数据包 ---> 网卡缓冲区 ---> 内核缓冲区 ---> 用户空间缓冲区

同步异步，阻塞非阻塞
·
session和cookie

无状态连接，不记录状态，在浏览器的表现形式就是，用户登录后，当连接断开后，还需要重新登录，每次连接需要重新验证身份

场景：比如我登录京东购物，进入一个产品界面进行观看，此时这个产品界面相当于下载到本地，是离线观看，但当我打算购物的时候，点击购物，此时需要重新访问网站，  理论上如果没有其他措施，此时点击购物后，需要重新登录进行身份验证，假设重新登录后点击购买后，到了支付页面，又断了……，后续支付仍需要重新登录以重新验证身份，这种情况明显不合理


经由上述场景，既然http是无状态连接，且连接后访问会断开，那么后续的连接就必然需要身份认证，但是人为交互体验不可忍受，因此可以交给浏览器进行后续的身份认证

如何实现让浏览器进行后续的身份认证，实现思路：服务器在第一次客户端发送请求后，向客户端返回响应的时候，向浏览器发送一条身份标识，即token，且该token具有时效性，比如15分钟内有效，此时浏览器上就保存第一次登录的身份信息，当后续访问断开，再次请求访问时，无需用户再次手动认证，而是浏览器使用该身份标识，即token信息作为身份标识发给服务端，而服务端在第一次返沪itoken时，记录了访问者和token的对应关系，因此当服务端收到这个token后，即可查出访问者是谁。

互联网中实现上述过程的技术就是cookie和session


cookie是可以在http首部字段中可以携带的一个小数据，cookie中可以带有用户的登录信息，当第一次服务器被登录成功后，服务器会生成一个cookie信息，通过http响应报文，将这个cookie发送给浏览器，浏览器就记住了服务器发送的cookie，当过了一段时间，浏览器和服务器断开连接后（在cookie有效期内），重新发起访问该网站时，浏览器会自动将cookie提交给服务器，而此时，cookie里就有服务器最初发给浏览器的token信息。服务器收到这个token后，就i可以验证其身份，从而实现身份认证，就不需要人为的输入验证密码了，这就是cookie的作用/

由于网络带宽限制，cookie中不适合携带大量数据，因此cookie通常仅存放少量信息，那像购物车这类大量信息的数据如何携带，则通常交由session负责

cookie和sessioni

session通常放在服务器端，在服务器端的内存中，有一个空间，存放各种cookie及其其他的相关信息，cookie相当于这些信息的主键，比如uuid，而session这是这些全部数据的集合
，

session的定义：
1. Session 是服务器端维护用户状态的一种机制。
2. 每个用户访问服务器时，服务器会为用户创建一个唯一的 Session ID（通常是随机生成的 UUID），用于标识用户会话。

3.Session 是一个数据集合，通常存储在服务器的内存中或某种存储介质（如 Redis 或数据库）中，用于保存用户的临时会话数据，例如：

- 用户登录状态
- 用户偏好设置
- 购物车信息

cookie的定义
1.  Cookie 是存储在客户端（浏览器）上的一小段数据。
2. 在基于 Session 的会话中，Cookie 通常用来存储 Session ID，并在后续请求中将这个 ID 发送回服务器，以便服务器识别用户会话。

cookie和session的关系
- Cookie 是 Session 的载体
	- Cookie 中通常包含一个字段（如 sessionid），用来携带 Session ID。
	- 服务器根据这个 Session ID 检索到与之对应的 Session 数据。

Session 和 Cookie 协作的典型工作流程：
1. 客户端首次请求服务器：
- 用户第一次访问网站时，服务器会创建一个唯一的 Session ID，存储在服务器端。
- 服务器将这个 Session ID 返回给客户端，通常通过 HTTP 响应头的 Set-Cookie 字段。
```
Set-Cookie: sessionid=abc123; Path=/; HttpOnly
```

2. 客户端保存 Cookie：
- 浏览器将服务器返回的 Cookie 保存到本地
- Cookie 包括 Session ID 和一些元信息（如有效期、路径、作用域等）。

3. 客户端后续请求携带cookie
- 在后续请求中，浏览器会自动将 Cookie 附加到 HTTP 请求中
```
Cookie: sessionid=abc123
```

4. 服务器端检索 Session：
- 服务器根据请求中的 Session ID，在服务器的存储介质中查找对应的 Session 数据
- 如果找到匹配的 Session，则验证并处理用户请求；否则，可能返回未登录或无效会话的响应。

5. 服务器更新 Session 数据
- 服务器可以根据需要更新或删除 Session 数据，例如更新用户登录状态、清空购物车等。




         